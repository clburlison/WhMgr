<br>
<nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/dashboard/geofences">Geofences</a></li>
        <li class="breadcrumb-item active" aria-current="page">Geofence {{name}}</li>
    </ol>
</nav>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">{{title}}</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#exportModal" onclick="onExportGeofence();">
                <i class="fas fa-file-export"></i>
                &nbsp;Export
            </button>
        </div>
    </div>
</div>

TODO: Hide geofence input and sync geofence input with map changes (keep format shown for save type)

<form method="POST" action="">
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" name="name" value="{{name}}">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Format</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="geofenceType" name="geofenceType" value="txt" {{isChecked format ".txt"}}>
            <label class="form-check-label" for="geofenceType">
                INI
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="geofenceType" name="geofenceType" value="json" {{isChecked format ".json"}}>
            <label class="form-check-label" for="geofenceType">
                GeoJSON
            </label>
        </div>
    </div>
    <div class="row">
        <div class="col col-lg">
            <div class="mb-3">
                <label for="geofence" class="form-label">Geofence</label>
                <textarea class="form-control" rows="25" id="geofence" name="geofence" onkeyup="onGeofenceUpdated();">{{geofence}}</textarea>
            </div>
        </div>
        <div class="col col-lg">
            <div id="map" style="height: 500px"></div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</form>

<div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="importModalLabel">Import Geofence</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="" class="form-label">Format</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="importGeofenceType" name="importGeofenceType" value="ini" checked>
                        <label class="form-check-label" for="importGeofenceType">
                            INI
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="importGeofenceType" name="importGeofenceType" value="json">
                        <label class="form-check-label" for="importGeofenceType">
                            GeoJSON
                        </label>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="importGeofence" class="form-label">Geofence</label>
                    <textarea class="form-control" rows="25" id="importGeofence" name="importGeofence"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="importGeofence();">Import</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportModalLabel">Export Geofences</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="" class="form-label">Format</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="exportGeofenceType" name="exportGeofenceType" value="ini" onclick="onExportGeofence();" checked>
                        <label class="form-check-label" for="exportGeofenceType">
                            INI
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="exportGeofenceType" name="exportGeofenceType" value="json" onclick="onExportGeofence();">
                        <label class="form-check-label" for="exportGeofenceType">
                            GeoJSON
                        </label>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="exportGeofence" class="form-label">Geofence</label>
                    <textarea class="form-control" rows="25" id="exportGeofence" name="exportGeofence" readonly></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="copyToClipboardBtn" name="copyToClipboardBtn" onclick="copyToClipboard();">Copy to Clipboard</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    const drawnItems = new L.FeatureGroup();
    const map = L.map('map', {
        preferCanvas: true,
        layers: [drawnItems],
    }).setView([34.01, -118.01], 9);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    const shapeOptions = {
        stroke: true,
        color: '#3388ff',
        weight: 3,
        opacity: 1,
        fill: true,
        fillColor: null, // same as color by default
        fillOpacity: 0.2,
    };
    const drawControl = new L.Control.Draw({
        position: 'topleft',
        draw: {
            polyline: false,
            polygon: {
                allowIntersection: true,
                showArea: true,
                //showLength: true,
                metric: 'km',
                precision: {
                    km: 2,
                },
                shapeOptions,
            },
            rectangle: {
                showRaidus: true,
                metric: true,
                shapeOptions,
            },
            circle: false,
            marker: false,
        },
        edit: {
            featureGroup: drawnItems,
            remove: true,
            edit: {
                selectedPathOptions: {
                    color: 'red',
                },
            },
        },
    });
    map.addControl(drawControl);

    L.easyButton('fas fa-file-import', function(btn, map) {
        // TODO: Show modal
        //$('#importModal').modal({ show: true, focus: true });
        var myModal = new bootstrap.Modal(document.getElementById('importModal'), { });
        myModal.show();

    }).addTo(map);
    L.easyButton('fas fa-trash', function(btn, map) {
        const result = confirm('Are you sure you want to delete all shapes?');
        if (!result) {
            return;
        }
        clearGeofences();
    }).addTo(map);

    map.on(L.Draw.Event.CREATED, function(e) {
        const layer = e.layer;
        /*
        const content = getPopupContent(layer);
        if (content) {
            layer.bindPopup(content);
        }
        */
        drawnItems.addLayer(layer);
        const geofenceType = $('#geofenceType').val();
        const geojson = layer.toGeoJSON();
        if (geofenceType === 'json') {
            // TODO: Get geojson geofence
        } else {
            // TODO: Get ini geofence
        }
        // TODO: Add geofence to input
    });

    onGeofenceUpdated();

    // TODO: Remove onGeofenceUpdated when geofence and format are hidden
    function onGeofenceUpdated() {
        const json = $('#geofence').val();
        const geofenceType = $('#geofenceType').is(':checked')
            ? 'ini'
            : 'json';
        clearGeofences();
        loadGeofences(json, geofenceType);
    }

    function loadGeofences(json, type) {
        if (!json) {
            return;
        }
        try {
            const geofences = type === 'json'
                ? JSON.parse(json)
                : iniToGeoJson(json);
            const geojson = L.geoJson(geofences, {
                onEachFeature: function(feature, layer) {
                    const html = `
<b>Name:</b> ${feature.properties.name}<br>
<b>Area:</b> ${0} sq km
`;
                    layer.bindTooltip(html);
                    drawnItems.addLayer(layer);
                },
            });
        } catch (err) {
            console.error('Failed to load areas.json file\nError:', err);
        }
    }

    function iniToGeoJson(data) {
        const geoJson = {
            type: 'FeatureCollection',
            features: [],
        };
        const fences = data.match(/\[([^\]]+)\]([^[]*)/g);
        for (const fence of fences) {
            const geofence = {
                type: 'Feature',
                properties: {
                    name: fence.match(/\[([^\]]+)\]/)[1],
                },
                geometry: {
                    type: 'Polygon',
                    coordinates: [[]],
                },
            };
            const coordinates = fence.match(/[0-9\-.]+,\s*[0-9\-.]+/g).map(point => [parseFloat(point.split(',')[1]), parseFloat(point.split(',')[0])]);
            geofence.geometry.coordinates[0] = coordinates;
            // Ensure first coordinate is also the last coordinate
            geofence.geometry.coordinates[0].push(geofence.geometry.coordinates[0][0]);
            geoJson.features.push(geofence);
        }
        return geoJson;
    }

    function geoJsonToIni(feature) {
        //const feature = JSON.parse(data);
        let geofence = [];
        if (feature.geometry.type === 'Polygon') {
            geofence.push(`[${feature.properties.name}]\n`);
            for (const coord of feature.geometry.coordinates) {
                coord.pop();
                for (const point of coord) {
                    geofence.push(`${point[1]},${point[0]}\n`);
                }
            }
        }
        return geofence.join('');
    }

    function clearGeofences() {
        drawnItems.clearLayers();
    }

    function importGeofence() {
        const geofenceType = $('#importGeofenceType').is(':checked')
            ? 'ini'
            : 'json';
        const geofence = $('#importGeofence').val();
        loadGeofences(geofence, geofenceType);
    }

    function onExportGeofence() {
        const geofence = $('#geofence').val();
        const geofenceType = $('#exportGeofenceType').is(':checked')
            ? 'ini'
            : 'json';
        const value = geofenceType === 'json'
            ? exportToGeoJson()
            : exportToIni();
        $('#exportGeofence').val(value);
    }

    function exportToGeoJson() {
        const featureCollection = {
            type: 'FeatureCollection',
            features: [],
        };
        drawnItems.eachLayer(function(layer) {
            const geojson = layer.toGeoJSON();
            if (geojson) {
                featureCollection.features.push(geojson);
            }
        });
        return JSON.stringify(featureCollection, null, 2);
    }

    function exportToIni() {
        const iniData = [];
        drawnItems.eachLayer(function(layer) {
            const geojson = layer.toGeoJSON();
            if (geojson) {
                const ini = geoJsonToIni(geojson);
                iniData.push(ini)
            }
        });
        return iniData.join('');
    }

    function copyToClipboard() {
        const copyText = document.getElementById('exportGeofence');
        copyText.select();
        // Mobile devices
        copyText.setSelectionRange(0, 99999);
        navigator.clipboard.writeText(copyText.value);
        $('#copyToClipboardBtn').html('Copied!');
    }

</script>